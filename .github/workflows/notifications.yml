name: Notifications

on:
  issues:
    types: [opened, labeled]
  pull_request:
    types: [opened, ready_for_review]
  release:
    types: [published]
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]

jobs:
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    steps:
      - name: Notify on new issue
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            
            // Auto-assign based on labels
            let assignees = [];
            if (issue.labels.some(l => l.name === 'bug')) {
              assignees.push(context.repo.owner);
            }
            
            if (assignees.length > 0) {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                assignees: assignees
              });
            }
            
            // Add comment with helpful information
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `Obrigado por reportar esta issue! 🛡️\n\nUm mantenedor irá revisar em breve.\n\nEnquanto isso, você pode:\n- Verificar se há issues similares\n- Fornecer mais detalhes se possível\n- Tentar reproduzir o problema`
            });
      
      - name: Notify on security issue
        if: |
          github.event_name == 'issues' && 
          github.event.action == 'labeled' &&
          github.event.label.name == 'security'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `🔒 **Security Issue Detected**\n\nEsta issue foi marcada como relacionada à segurança e receberá prioridade máxima.\n\nPor favor, **NÃO** compartilhe detalhes sensíveis publicamente.\n\nSe necessário, entre em contato diretamente com os mantenedores.`
            });
            
            // Add to security project board if exists
            core.notice('Security issue detected and flagged for priority review');
      
      - name: Notify on PR ready for review
        if: github.event_name == 'pull_request' && github.event.action == 'ready_for_review'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            core.summary
              .addHeading('✅ PR Ready for Review')
              .addRaw(`\n**PR #${pr.number}**: ${pr.title}\n`)
              .addRaw(`**Author**: @${pr.user.login}\n`)
              .addRaw(`**Branch**: ${pr.head.ref} → ${pr.base.ref}\n`)
              .write();
      
      - name: Notify on release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/github-script@v7
        with:
          script: |
            const release = context.payload.release;
            
            core.summary
              .addHeading('🎉 New Release Published')
              .addRaw(`\n**Version**: ${release.tag_name}\n`)
              .addRaw(`**Name**: ${release.name}\n`)
              .addRaw(`\n### Installation\n`)
              .addCodeBlock(`npm install -g @isckosta/sentinel@${release.tag_name.replace('v', '')}`, 'bash')
              .write();
            
            // You can add Slack/Discord webhook here
            // await fetch(process.env.SLACK_WEBHOOK, {
            //   method: 'POST',
            //   body: JSON.stringify({
            //     text: `🎉 New Sentinel release: ${release.tag_name}`
            //   })
            // });
      
      - name: Notify on CI failure
        if: |
          github.event_name == 'workflow_run' &&
          github.event.workflow_run.conclusion == 'failure' &&
          github.event.workflow_run.event == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            
            // Create issue for CI failure on master
            if (run.head_branch === 'master') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 CI Failed on master - ${new Date().toISOString().split('T')[0]}`,
                body: `CI pipeline failed on master branch.\n\n**Workflow**: ${run.name}\n**Run**: ${run.html_url}\n**Commit**: ${run.head_sha}\n\nPlease investigate and fix ASAP.`,
                labels: ['bug', 'ci-failure', 'priority-high']
              });
            }
      
      - name: Weekly summary
        if: github.event.schedule == '0 0 * * 1'
        uses: actions/github-script@v7
        with:
          script: |
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            // Get issues created this week
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              since: oneWeekAgo.toISOString()
            });
            
            // Get PRs merged this week
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc'
            });
            
            const mergedPRs = prs.filter(pr => 
              pr.merged_at && 
              new Date(pr.merged_at) > oneWeekAgo
            );
            
            core.summary
              .addHeading('📊 Weekly Summary')
              .addRaw(`\n**Period**: Last 7 days\n`)
              .addRaw(`**New Issues**: ${issues.length}\n`)
              .addRaw(`**Merged PRs**: ${mergedPRs.length}\n`)
              .write();
